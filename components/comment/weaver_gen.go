package comment

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"fmt"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"time"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:  "github.com/devfullcycle/service-weaver-demo/components/comment/CommentComponent",
		Iface: reflect.TypeOf((*CommentComponent)(nil)).Elem(),
		New:   func() any { return &commentComponent{} },
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return commentComponent_local_stub{impl: impl.(CommentComponent), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return commentComponent_client_stub{stub: stub, postMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/devfullcycle/service-weaver-demo/components/comment/CommentComponent", Method: "Post"}), getByBookMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "github.com/devfullcycle/service-weaver-demo/components/comment/CommentComponent", Method: "GetByBook"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return commentComponent_server_stub{impl: impl.(CommentComponent), addLoad: addLoad}
		},
	})
}

// Local stub implementations.

type commentComponent_local_stub struct {
	impl   CommentComponent
	tracer trace.Tracer
}

func (s commentComponent_local_stub) Post(ctx context.Context, a0 Comment) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "comment.CommentComponent.Post", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Post(ctx, a0)
}

func (s commentComponent_local_stub) GetByBook(ctx context.Context, a0 string) (r0 []Comment, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "comment.CommentComponent.GetByBook", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetByBook(ctx, a0)
}

// Client stub implementations.

type commentComponent_client_stub struct {
	stub             codegen.Stub
	postMetrics      *codegen.MethodMetrics
	getByBookMetrics *codegen.MethodMetrics
}

func (s commentComponent_client_stub) Post(ctx context.Context, a0 Comment) (err error) {
	// Update metrics.
	start := time.Now()
	s.postMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "comment.CommentComponent.Post", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.postMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.postMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += serviceweaver_size_Comment_c1ff5872(&a0)
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.postMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.postMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s commentComponent_client_stub) GetByBook(ctx context.Context, a0 string) (r0 []Comment, err error) {
	// Update metrics.
	start := time.Now()
	s.getByBookMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "comment.CommentComponent.GetByBook", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getByBookMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getByBookMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += (4 + len(a0))
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	enc.String(a0)
	var shardKey uint64

	// Call the remote method.
	s.getByBookMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.getByBookMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_Comment_2c83ce82(dec)
	err = dec.Error()
	return
}

// Server stub implementations.

type commentComponent_server_stub struct {
	impl    CommentComponent
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s commentComponent_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Post":
		return s.post
	case "GetByBook":
		return s.getByBook
	default:
		return nil
	}
}

func (s commentComponent_server_stub) post(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 Comment
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Post(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s commentComponent_server_stub) getByBook(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 string
	a0 = dec.String()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetByBook(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_Comment_2c83ce82(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = &Comment{}

func (x *Comment) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Comment.WeaverMarshal: nil receiver"))
	}
	enc.String(x.ID)
	enc.String(x.Author)
	enc.String(x.Comment)
	enc.String(x.BookID)
}

func (x *Comment) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Comment.WeaverUnmarshal: nil receiver"))
	}
	x.ID = dec.String()
	x.Author = dec.String()
	x.Comment = dec.String()
	x.BookID = dec.String()
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_Comment_2c83ce82(enc *codegen.Encoder, arg []Comment) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_Comment_2c83ce82(dec *codegen.Decoder) []Comment {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]Comment, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

// Size implementations.

// serviceweaver_size_Comment_c1ff5872 returns the size (in bytes) of the serialization
// of the provided type.
func serviceweaver_size_Comment_c1ff5872(x *Comment) int {
	size := 0
	size += (4 + len(x.ID))
	size += (4 + len(x.Author))
	size += (4 + len(x.Comment))
	size += (4 + len(x.BookID))
	size += 0
	return size
}
